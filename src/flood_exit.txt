static void players_init_pos(t_map *map)
{
	int y;
	int x;

	x = 1;
	while (x < map->rows)
	{
		y = 1;
		while (y < map->cols)
		{
			if (map->matrix[x][y] == 'P')
			{
				map->player_pos.y = y;
				map->player_pos.x = x;
			}
			if (map->matrix[x][y] == 'E')
			{
				map->exit_pos.y = y;
				map->exit_pos.x = x;
			}
			y++;
		}
		x++;
	}
}

void flood_fill(t_map *map, int x, int y, int *ccoins)
{
	if (x < 0 || y < 0 || y >= map->cols || x >= map->rows)
		return;
	if (map->matrix[x][y] == '1' || map->matrix[x][y] == 'V' || map->matrix[x][y] == 'E')
		return;
	if (map->matrix[x][y] == 'C')
		(*ccoins)++;
	map->matrix[x][y] = 'V';
	flood_fill(map, x + 1, y, ccoins);
	flood_fill(map, x - 1, y, ccoins);
	flood_fill(map, x, y + 1, ccoins);
	flood_fill(map, x, y - 1, ccoins);
}

static int check_exit_accessible(t_map *map)
{
    int x = map->exit_pos.x;
    int y = map->exit_pos.y;

    if (x < 0 || y < 0 || y >= map->cols || x >= map->rows)
        return (1);

    // Verifica si alguna de las celdas adyacentes a la salida es 'V'
    if (map->matrix[x + 1][y] == 'V' ||
        map->matrix[x - 1][y] == 'V' ||
        map->matrix[x][y + 1] == 'V' ||
        map->matrix[x][y - 1] == 'V')
    {
        return (0); // Exit is accessible
    }
    return (1); // Exit is not accessible
}

static void flood_exit(t_map *map, int x, int y)
{
	if (x < 0 || y < 0 || y >= map->cols || x >= map->rows)
		return;
	if (map->matrix[x][y] == '1' || map->matrix[x][y] == 'V')
		return;
	map->matrix[x][y] = 'V'; // Marca la celda como visitada
	flood_exit(map, x + 1, y);
	flood_exit(map, x - 1, y);
	flood_exit(map, x, y + 1);
	flood_exit(map, x, y - 1);
}

void print_map(t_map *map)
{
	int y;
	int x;

	y = 0;
	while (y < map->rows)
	{
		x = 0;
		while (x < map->cols)
		{
			ft_putchar(map->matrix[y][x]);
			x++;
		}
		ft_putchar('\n');
		y++;
	}
	ft_putchar('\n');
}

static void copy_map_matrix(t_map *copy_map, t_map *map)
{
	int i;
	int j;

	copy_map->matrix = malloc(sizeof(char *) * map->rows);
	if (!copy_map->matrix)
		handle_error("Error: Memory allocation failed\n", 30, map, NULL);
	i = 0;
	while (i < map->rows)
	{
		copy_map->matrix[i] = malloc(sizeof(char) * map->cols);
		if (!copy_map->matrix[i])
			handle_error("Error: Memory allocation failed\n", 30, map, NULL);
		j = 0;
		while (j < map->cols)
		{
			copy_map->matrix[i][j] = map->matrix[i][j];
			j++;
		}
		i++;
	}
}

void validation_player(int *ccoins, t_map *map)
{
	t_map copy_map;
	t_map copy_map2;

	// Inicializa posiciones del jugador y salida
	players_init_pos(map);

	// Copia el mapa para validar el camino del jugador
	copy_map.rows = map->rows;
	copy_map.cols = map->cols;
	copy_map2.rows = map->rows;
	copy_map2.cols = map->cols;

	copy_map_matrix(&copy_map, map);
	copy_map_matrix(&copy_map2, map);

	// Ejecuta flood fill para el jugador
	flood_fill(&copy_map, map->player_pos.x, map->player_pos.y, ccoins);
	print_map(&copy_map);

	// Ejecuta flood fill para la salida
	flood_exit(&copy_map2, map->exit_pos.x, map->exit_pos.y);
	print_map(&copy_map2);

	ft_printf("coins total en MAP: %d\n", map->coins);
	ft_printf("coins POINTER: %d\n", *ccoins);

	// Verifica si el jugador recogió todas las monedas y si la salida es accesible
	if (*ccoins == map->coins && check_exit_accessible(&copy_map2) == 0)
	    ft_printf("¡CCOINS Ok y Exit Ok!\n");
	else
	{
	    free_map2d(&copy_map);
	    free_map2d(&copy_map2);
	    handle_error(ERROR_COINS_EXIT, 20, map, NULL);
	}

	free_map2d(&copy_map);
	free_map2d(&copy_map2);
}
